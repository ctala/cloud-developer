service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  #Tracing allows us more detailed information through XRay
  tracing:
    lambda: true
    apiGateway: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamoTableTodos}
    - Effect: Allow
      Action:
       - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamoTableTodos}/index/userId-timestamp-index

    - Effect: Allow
      Action:
       - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamoTableTodos}/index/userId-timestamp-index

    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: arn:aws:secretsmanager:us-west-2:938515849324:secret:dev/cert/auth0-MvMzd2

    - Effect: Allow
      Action:
        - S3:GetObject
        - S3:PutObject
      Resource: arn:aws:s3:::${self:custom.bucketName}/*

  environment:
    TODOS_TABLE: ${self:custom.dynamoTableTodos}
    BUCKET_NAME: ${self:custom.bucketName}


# package:
#  individually: true

functions:
  Auth:
    handler: src/lambda/auth/rs256Auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          authorizer: Auth
          path: todos
          cors: true


  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          authorizer: Auth
          cors: true


  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          authorizer: Auth
          cors: true


  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          authorizer: Auth
          cors: true

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          authorizer: Auth
          cors: true

resources:
    # TODO: Add any necessary AWS resources
  - ${file(resources/dynamodb-todos.yml)}
  - ${file(resources/s3-bucket.yml)}

custom:

# Databases
## Dynamodb
### Default
  dynamoDBDeletePolicies:
    prod: Retain
    dev: Delete
    local: Delete
    other: Delete
  dynamodb:
    start:
      migrate: true
    stages:
      - dev
### Names
  dynamoTableTodos : Todos-${self:provider.stage}


  #S3
  bucketName: ctala-udagram-${self:provider.stage}